#!/usr/bin/env python3
"""
Script de verifica√ß√£o de configura√ß√£o para Render
Exibe todas as informa√ß√µes necess√°rias para configurar o bot
"""
import os
import sys

def check_config():
    print("=" * 60)
    print("üîç VERIFICA√á√ÉO DE CONFIGURA√á√ÉO - TELEGRAM BOT")
    print("=" * 60)
    print()
    
    # Verifica BOT_TOKEN
    bot_token = os.getenv("BOT_TOKEN", "")
    if bot_token:
        print("‚úÖ BOT_TOKEN configurado")
        print(f"   Bot ID: {bot_token.split(':')[0]}")
    else:
        print("‚ùå BOT_TOKEN N√ÉO CONFIGURADO!")
        print("   Configure no Render: Environment ‚Üí BOT_TOKEN")
        return False
    
    print()
    
    # Verifica Spotify
    spotify_id = os.getenv("SPOTIFY_CLIENT_ID", "")
    spotify_secret = os.getenv("SPOTIFY_CLIENT_SECRET", "")
    
    if spotify_id and spotify_secret:
        print("‚úÖ Credenciais do Spotify configuradas")
        print(f"   Client ID: {spotify_id[:20]}...")
    else:
        print("‚ö†Ô∏è  Spotify n√£o configurado (opcional)")
        print("   Configure SPOTIFY_CLIENT_ID e SPOTIFY_CLIENT_SECRET")
    
    print()
    
    # Detecta URL do servidor
    render_url = os.getenv("RENDER_EXTERNAL_URL", "")
    manual_uri = os.getenv("SPOTIFY_REDIRECT_URI", "")
    replit_domain = os.getenv("REPLIT_DEV_DOMAIN", "")
    
    detected_url = None
    detection_method = None
    
    if manual_uri:
        detected_url = manual_uri
        detection_method = "SPOTIFY_REDIRECT_URI (Manual)"
    elif render_url:
        detected_url = render_url
        detection_method = "RENDER_EXTERNAL_URL (Autom√°tico)"
    elif replit_domain:
        detected_url = f"https://{replit_domain}"
        detection_method = "REPLIT_DEV_DOMAIN (Desenvolvimento)"
    else:
        detected_url = "http://localhost:8080"
        detection_method = "Localhost (Fallback)"
    
    print("üåê URL DO SERVIDOR DETECTADA:")
    print(f"   URL: {detected_url}")
    print(f"   M√©todo: {detection_method}")
    print()
    
    # Monta URLs importantes
    webhook_url = f"{detected_url}/webhook"
    spotify_callback_url = f"{detected_url}/callback/spotify"
    auth_url = f"{detected_url}/auth/spotify?user_id=USER_ID"
    health_url = f"{detected_url}/health"
    
    print("üìç ENDPOINTS CONFIGURADOS:")
    print(f"   Webhook Telegram: {webhook_url}")
    print(f"   Callback Spotify: {spotify_callback_url}")
    print(f"   Health Check: {health_url}")
    print()
    
    # Instru√ß√µes para Spotify
    if spotify_id and spotify_secret:
        print("=" * 60)
        print("üéµ CONFIGURA√á√ÉO DO SPOTIFY DEVELOPER DASHBOARD")
        print("=" * 60)
        print()
        print("1. Acesse: https://developer.spotify.com/dashboard")
        print("2. Selecione seu app")
        print("3. Clique em 'Edit Settings'")
        print("4. No campo 'Redirect URIs', adicione:")
        print()
        print(f"   {spotify_callback_url}")
        print()
        print("5. Clique em 'Save'")
        print()
        print("‚ö†Ô∏è  IMPORTANTE: Sem este passo, o Spotify OAuth N√ÉO vai funcionar!")
        print()
    
    # Instru√ß√µes adicionais
    if "render.com" in detected_url or "onrender.com" in detected_url:
        print("=" * 60)
        print("üì¶ DEPLOY NO RENDER")
        print("=" * 60)
        print()
        print("‚úÖ Detectado ambiente Render!")
        print()
        print("Vari√°veis de ambiente necess√°rias no Render:")
        print("  ‚Ä¢ BOT_TOKEN (obrigat√≥rio)")
        print("  ‚Ä¢ SPOTIFY_CLIENT_ID (para integra√ß√£o Spotify)")
        print("  ‚Ä¢ SPOTIFY_CLIENT_SECRET (para integra√ß√£o Spotify)")
        print("  ‚Ä¢ OPENAI_API_KEY (opcional - para IA)")
        print("  ‚Ä¢ GOOGLE_API_KEY (opcional - para pesquisa)")
        print("  ‚Ä¢ GOOGLE_CSE_ID (opcional - para pesquisa)")
        print()
        print("üí° O Render fornece RENDER_EXTERNAL_URL automaticamente.")
        print("   Voc√™ N√ÉO precisa configurar SPOTIFY_REDIRECT_URI!")
        print()
    
    # Status final
    print("=" * 60)
    print("‚úÖ VERIFICA√á√ÉO CONCLU√çDA")
    print("=" * 60)
    print()
    
    return True

if __name__ == "__main__":
    try:
        success = check_config()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"\n‚ùå Erro durante verifica√ß√£o: {e}")
        sys.exit(1)
